@charset "utf-8";

@import "variables";
@import "mixins";

html,
body {
    height: 100%;
}

.clear {
    @extend %clearfix;
    clear: both;
}

//-----------------------
// Height Variants
//-----------------------

.height-auto {
    height: auto;
}

.height-xs {
    height: 100px;
    overflow-y: auto;
}

.height-sm {
    height: 200px;
    overflow-y: auto;
}

.height-md {
    height: 320px;
    overflow-y: auto;
}

//-----------------------
// Borders
//-----------------------
// No Border
.border-none {
    border: 0;
}

// border left light 
.left-border {
    border-left: 1px solid $color-very-light-grey-alt;
}

// Cursor
//-----------------------
// Cursors
//-----------------------
// Cursor - pointer
.cursor-pointer {
    cursor: pointer;
}

// Cursor Highlighter
.cursor-highlight-wrapper {
    .cursor-highlight__element {
        position: relative;

        &:before {
          @include simple-transition();
          position: absolute;
          content: "";
          display: block;
          left: 0;
          bottom: .1em;
          width: 0%;
          height: 1px;
          background-color: $color-grey;
        }

        &:hover {
            cursor: pointer;
        }
    }

    &:hover,
    &:focus {
        .cursor-highlight__element:before {
            width: 100%;
        }
    }
}

//-----------------------
// Text
//-----------------------

// Text Overlap Elypssis
.text-truncate {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

// Text Wrap
.text-wrap {
    word-wrap: break-word;
    word-break: break-all;
}

// Whitespace
.nowrap {
  white-space: nowrap !important;
}


//-----------------------
// Dividers
//-----------------------

// Divider - Spacers
[class^="hr-"] {
  &.hr-spacer {
    &-none {
      margin: 0;
    }

    &-xs {
        margin: $spacer-xs 0;
    }

    &-sm {
        margin: $spacer-sm 0;
    }

    &-base {
      margin: $spacer-base 0;
    }

    &-md {
      margin: $spacer-md 0;
    }

    &-lg {
      margin: $spacer-lg 0;
    }
  }
}

// Divider - Color Variants
[class^="hr-"] {
  &.hr-dark {
    border: 0;
    border-top: solid 1px $color-very-light-grey;
    margin: $spacer-base 0;
  }
}


// ----------------------------------------------
// Spacers
// ----------------------------------------------
// Usage:
// Always apply spacers either for DIV or SPAN tags.
// For padding use "in", and for margins use "out" as the naming convention for the CSS selectors.
// FOr Sizes: "sm", "base", "md", "lg" and "none"
//
// Padding - all sides
// <div class="spacer-in-sm"></div> - Small
// <div class="spacer-in-base"></div> - Normal
// <div class="spacer-in-md"></div> - Medium
// <div class="spacer-in-lg"></div> - Large
// <div class="spacer-in-none"></div> - No padding
//
// Margin - all sides
// Does not work with <span> tags.
// <div class="spacer-out-sm"></div> - Small
// <div class="spacer-out-base"></div> - Normal
// <div class="spacer-out-md"></div> - Medium
// <div class="spacer-out-lg"></div> - Large
// <div class="spacer-out-none"></div> - No margin
//
// Vertical Padding
// <div class="spacer-in-v-sm"></div> - Small
// <div class="spacer-in-v-base"></div> - Normal
// <div class="spacer-in-v-md"></div> - Medium
// <div class="spacer-in-v-lg"></div> - Large
// <div class="spacer-in-v-none"></div> - No padding for top and bottom
//
// Horizontal Margin
// <div class="spacer-out-h-sm"></div> - Small
// <div class="spacer-out-h-base"></div> - Normal
// <div class="spacer-out-h-md"></div> - Medium
// <div class="spacer-out-h-lg"></div> - Large
// <div class="spacer-out-h-none"></div> - No margin for left and right side
//
// Applying margin or padding for specific side
// <div class="spacer-out-top-sm"></div> - Small margin at the top
// <div class="spacer-in-bottom-lg"></div> - Large padding at the bottom
.spacer {
    @each $boundary, $boundary-property in $box-boundary-list {
        &-#{$boundary} {
            @each $current-size, $current-size-value in $spacer-size-list {
                @each $side in $spacer-sides {
                    &-#{$side}-#{$current-size} {
                        #{$boundary-property}-#{$side}: $current-size-value !important;
                    }
                }
                &-#{$current-size} {
                    #{$boundary-property}: $current-size-value;
                }
                &-v-#{$current-size} {
                    #{$boundary-property}-top: $current-size-value;
                    #{$boundary-property}-bottom: $current-size-value;
                }
                &-h-#{$current-size} {
                    #{$boundary-property}-left: $current-size-value;
                    #{$boundary-property}-right: $current-size-value;
                }
            }
        }
    }
}
